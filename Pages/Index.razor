@page "/"

@code {
    private static Dictionary<EntryState, (string Class, string TitleText)> stateFlags = new()
        {
            [EntryState.PathWarning] = ("oi oi-folder text-warning", "Wrong path"),
            [EntryState.FileNameWarning] = ("oi oi-file text-warning", "Wrong file name"),
            [EntryState.MetadataWarning] = ("oi oi-cog text-warning", "Metadata mismatch"),
        };
}

<div class="container-fluid sticky-top bg-light border-bottom">
    <EditForm class="row py-3" Model="this" OnSubmit="Search">
        <div class="col-xl-4">
            <div>
                <label class="form-label">
                    Root folder:
                </label>
                <div class="input-group">
                    <button class="btn btn-outline-info" @onclick="() => ChangeFolderAsync(Directory.GetParent(selectedFolder!)!.FullName)" title="Up one folder"><i class="oi oi-arrow-circle-top"></i></button>
                    <i class="btn btn-outline-info">
                        Only warnings
                        <InputCheckbox class="form-check-input" @bind-Value="showOnlyWarnings" />
                    </i>
                    <InputText class="form-control" @bind-Value="selectedFolder" @bind-Value:after="SaveLastFolderAsync" />
                    <button class="btn btn-outline-info">Search</button>
                </div>
            </div>
        </div>
        <div class="col-xl-8">
            @if (files?.Any() == true)
            {
                var selected = files.Sum(g => g.Count(f => f.IsSelected));
                var count = files.Sum(g => g.Count());
                <div class="d-flex flex-shrink-1">
                    <div class="text-nowrap me-2 my-auto">
                        <span class="@(selected > 0 ? "text-success" : "")">@selected</span> / <span>@count</span>
                    </div>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="CopyPerformers" disabled="@(selected == 0)">Copy "Performers" to "Album artists"</button>

                    <button class="btn btn-sm btn-outline-secondary" @onclick="FileRenameToTrackNoAndTitle" disabled="@(selected == 0)">Rename to <i>"05 - Smoke on the Water"</i></button>

                    <button class="btn btn-sm btn-outline-secondary" @onclick="FileRenameToTitle" disabled="@(selected == 0)">Rename to <i>"Smoke on the Water"</i></button>

                    <button class="btn btn-sm btn-outline-secondary" @onclick="FileRenameToArtistAndTitle" disabled="@(selected == 0)">Rename to <i>"Deep Purple - Smoke on the Water"</i></button>

                    <button class="btn btn-sm btn-outline-secondary" @onclick="FileRenameTrackArtistsAndTitle" disabled="@(selected == 0)">Rename to <i>"05 - Deep Purple - Smoke on the Water"</i></button>
                </div>
            }

        </div>
    </EditForm>

    <hr />
    <div class="d-flex my-2">
        @if (streamingEntry != null)
        {
            <audio controls preload="auto" autoplay src="/listen/get?path=@System.Web.HttpUtility.UrlEncode(streamingEntry.File.FullName)"></audio>
            <div class="my-auto mx-2">
                <label>@streamingEntry.File.Name</label>
                <button class="btn btn-outline-primary" @onclick="() => streamingEntry = null"><i class="oi oi-media-stop"></i></button>
            </div>
        }
        else
        {
            <audio controls></audio>
        }
    </div>
</div>

@if (message != null)
{
    <div class="alert alert-primary">@message <a href="#" @onclick="ClearMessage">X</a></div>
}

@if (selectedFolder != null && files != null)
{
    <div class="table-responsive">
        <div class="table table-striped">
            <table>
                <tbody>
                    @foreach (var folder in files.OrderBy(g => g.Key.Directory))
                    {
                        <tr class="bg-info">
                            <th colspan="11">
                                <button class="btn btn-link" @onclick="() => ChangeFolderAsync(folder.Key.Directory)">
                                    @Path.GetRelativePath(selectedFolder, folder.Key!.Directory)
                                </button>
                            </th>
                        </tr>
                        <tr>
                            <th rowspan="2"></th>
                            <th rowspan="2" colspan="2">
                                <i class="p-1 oi oi-check" @onclick="() => SwitchAll(folder)"></i>
                            </th>
                            <th rowspan="2">Filename</th>
                            <th colspan="6">ID3</th>
                        </tr>
                        <tr>
                            <th>#</th>
                            <th>Performers</th>
                            <th>Title</th>
                            <th>Year</th>
                            <th>Album artists</th>
                            <th>Album</th>
                        </tr>

                        @foreach (var entry in folder.OrderBy(e => e.Album).ThenBy(e => e.Disc).ThenBy(e => e.Track).ThenBy(e => e.File.Name))
                        {
                            <tr class="@(entry.File.Extension != ".mp3" ? "text-muted" : "")">
                                <td><i class="btn @(streamingEntry == entry ? "btn-primary" : "btn-outline-primary")" @onclick="() => streamingEntry = entry"><i class="oi oi-media-play"></i></i></td>
                                <td>
                                    <InputCheckbox class="form-check-input" @bind-Value="entry.IsSelected" />
                                </td>
                                <td>
                                    @if (entry.State != EntryState.None)
                                    {
                                        foreach (var (state, (@class, title)) in stateFlags)
                                        {
                                            if (entry.State.HasFlag(state))
                                            {
                                                <span title="@title" class="mx-1">
                                                    <i class="@(@class)"></i>
                                                </span>
                                            }
                                        }
                                    }
                                </td>
                                <td>
                                    @entry.File.Name
                                    <div class="small ps-4 text-muted">
                                        <span>
                                            @GetFileLengthFormatted(entry.File.Length)
                                        </span>
                                        @if (entry.Duration is { } duration)
                                        {
                                            <span> | </span>
                                            <span>@duration.ToString(duration.Hours > 0 ? "hh\\:mm\\:ss" : "mm\\:ss")</span>
                                        }
                                    </div>
                                </td>
                                @if (entry.TagFile is { } tagFile)
                                {
                                    <td class="text-muted">
                                        <InputNumber @bind-Value="@entry.Track" @bind-Value:after="() => entry.Save()" style="width: 40px" />
                                        @*<InputNumber @bind-Value="@entry.Disc" @bind-Value:after="() => entry.Save()" style="width: 40px" />*@
                                    </td>
                                    <td>
                                        <InputText @bind-Value="@entry.Performers" @bind-Value:after="() => entry.Save()" style="width: 350px" />
                                    </td>
                                    <td><InputText @bind-Value="@entry.Title" @bind-Value:after="() => entry.Save()" style="width: 350px" /></td>
                                    <td class="text-muted"><InputNumber @bind-Value="@entry.Year" @bind-Value:after="() => entry.Save()" style="width: 60px" /> <br></td>
                                    <td><InputText @bind-Value="@entry.AlbumArtists" @bind-Value:after="() => entry.Save()" style="width: 350px" /></td>
                                    <td><InputText @bind-Value="@entry.Album" @bind-Value:after="() => entry.Save()" style="width: 350px" /></td>

                                }
                                else
                                {
                                    <td colspan="6"></td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private void SwitchAll(IGrouping<DirectoryEntry, Entry> group)
    {
        var value = group.Any(f => !f.IsSelected);
        foreach (var item in group)
            item.IsSelected = value;
    }
}